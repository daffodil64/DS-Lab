#include <stdio.h>
#include <stdlib.h>

#define MAX 100

// Node structure
struct node {
    int vertex;
    struct node* next;
};

typedef struct node* GNODE;

// Adjacency list and visited array
GNODE graph[MAX];
int visited[MAX];

// DFS function
void DFS(int v) {
    GNODE temp;
    visited[v] = 1;
    printf("%d\n", v);

    for (temp = graph[v]; temp != NULL; temp = temp->next) {
        if (!visited[temp->vertex]) {            DFS(temp->vertex);        }
    }
}
void main() {
    int n, E, i, s, d, v;
    GNODE q, p;

    // Initialize graph
    for (i = 0; i < MAX; i++) {
        graph[i] = NULL;
        visited[i] = 0;
    }

    printf("Enter no of vertices: ");
    scanf("%d", &n);
    printf("Enter no of edges: ");
    scanf("%d", &E);

    for (i = 0; i < E; i++) {
        printf("Enter source: ");
        scanf("%d", &s);
 printf("Enter destination: ");
        scanf("%d", &d);

        // Create and insert node into adjacency list
        q = (GNODE)malloc(sizeof(struct node));
        q->vertex = d;
        q->next = NULL;

        if (graph[s] == NULL)
            graph[s] = q;
        else {
            p = graph[s];
            while (p->next != NULL)
                p = p->next;
            p->next = q;
        }
    }
    printf("Enter Start Vertex for DFS: ");    scanf("%d", &v);
    printf("DFS of graph: \n");
    DFS(v);
}
