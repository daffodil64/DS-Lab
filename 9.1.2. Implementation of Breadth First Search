#include <stdio.h>
#include <stdlib.h>

#define MAX 99

// Structure for adjacency list node
struct node {
    int vertex;
    struct node *next;
};

typedef struct node *GNODE;

// Graph as an array of pointers to linked list nodes
GNODE graph[MAX];

// Queue for BFS
int queue[MAX], front = -1, rear = -1;

// Visited array
int visited[MAX];

// Enqueue operation
void enqueue(int v) {
    if (rear == MAX - 1) {
        printf("Queue Overflow\n");
        return;
    }
    if (front == -1) front = 0;
    queue[++rear] = v;
}
// Dequeue operation
int dequeue() {
    if (front == -1 || front > rear) {
        return -1;  // queue is empty
    }
    return queue[front++];
}
void BFS(int start) {
    visited[start] = 1;
    enqueue(start);

    while (front <= rear) {
        int current = dequeue();
        printf("%d\n", current);
        GNODE temp = graph[current];
        while (temp != NULL) {
            int adj = temp->vertex;
            if (!visited[adj]) {
                visited[adj] = 1;
                enqueue(adj);
            }
            temp = temp->next;
        }
    }
}
void main() {
    int n, E, s, d, i;
    GNODE p, q;
    
    // Initialize graph
    for (i = 0; i < MAX; i++) {
        graph[i] = NULL;
        visited[i] = 0;
	} printf("Enter no of vertices: ");
    scanf("%d", &n);

    printf("Enter no of edges: ");
    scanf("%d", &E);

    for (i = 1; i <= E; i++) {
        printf("Enter source: ");
        scanf("%d", &s);
        printf("Enter destination: ");
        scanf("%d", &d);

        q = (GNODE)malloc(sizeof(struct node));
        q->vertex = d;
        q->next = NULL;

        if (graph[s] == NULL) {
            graph[s] = q;
        } else {
            p = graph[s];
            while (p->next != NULL)
                p = p->next;
            p->next = q;
        }
    }

    int start;
    printf("Enter Start Vertex for BFS: ");
    scanf("%d", &start);

    printf("BFS of graph: \n");
    BFS(start);
    printf("\n");
}
